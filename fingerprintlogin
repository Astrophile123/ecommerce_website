import React, { useState, useEffect, useRef } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import axios from 'axios';
import styles from './Login.module.css';

const Login = () => {
  const [userData, setUserData] = useState({ username: '' });
  const [errorMessage, setErrorMessage] = useState('');
  const [loading, setLoading] = useState(false);
  const [currentField, setCurrentField] = useState(null);
  const recognitionRef = useRef(null);
  const synthRef = useRef(window.speechSynthesis);
  const navigate = useNavigate();

  // Function to speak text
  const speakText = (text) => {
    if (!synthRef.current) return;
    synthRef.current.cancel();
    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = 'en-US';
    utterance.rate = 1;
    utterance.pitch = 1.2;
    utterance.voice = synthRef.current.getVoices().find(voice => voice.name.includes("Google UK English Female")) || synthRef.current.getVoices()[0];
    synthRef.current.speak(utterance);
  };

  // Initialize Speech Recognition
  useEffect(() => {
    if ('webkitSpeechRecognition' in window) {
      const SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;
      const recognition = new SpeechRecognition();
      recognition.continuous = false;
      recognition.interimResults = false;
      recognition.lang = 'en-US';

      recognition.onresult = (event) => {
        const transcript = event.results[0][0].transcript.trim();
        console.log(`Recognized speech: ${transcript}`);

        setUserData((prev) => ({
          ...prev,
          [currentField]: transcript
        }));

        speakText(`You entered: ${transcript}`);
      };

      recognition.onerror = (event) => {
        console.error('Speech recognition error:', event.error);
        speakText('Voice input failed. Please try again.');
      };

      recognitionRef.current = recognition;
    } else {
      console.error('Speech Recognition not supported.');
      speakText('Sorry, your browser does not support voice input.');
    }

    return () => {
      if (recognitionRef.current) recognitionRef.current.stop();
    };
  }, [currentField]);

  // Handle field focus
  const handleFieldFocus = (field) => {
    setCurrentField(field);
    if (recognitionRef.current) {
      recognitionRef.current.abort();
      setTimeout(() => recognitionRef.current.start(), 200);
    }
    speakText(`Please say your ${field}`);
  };

  // Fingerprint Authentication using WebAuthn
  const authenticateWithFingerprint = async () => {
    try {
      setLoading(true);
      setErrorMessage('');

      speakText("Place your finger on the scanner to log in.");

      const credential = await navigator.credentials.get({
        publicKey: {
          challenge: new Uint8Array(32),
          userVerification: "required",
          timeout: 60000,
        },
      });

      if (!credential) {
        throw new Error("Fingerprint authentication failed.");
      }

      const response = await axios.post('http://localhost:8082/login', {
        username: userData.username,
        credential_id: credential.id,
      });

      if (response.data.success) {
        localStorage.setItem('user', JSON.stringify(response.data.user));
        speakText("Login successful. Redirecting to the products page.");
        navigate('/products');
      } else {
        throw new Error(response.data.message || "Login failed. Please try again.");
      }
    } catch (error) {
      console.error("Login error:", error);
      const errorMsg = error.message || "Login failed. Please try again.";
      setErrorMessage(errorMsg);
      speakText(errorMsg);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className={styles.mainContainer}>
      <h1 className={styles.pageHeading}>Echosavvy</h1>
      <div className={styles.formContainer}>
        <h2>Login</h2>

        <input
          type="text"
          required
          placeholder="Enter Your Username"
          value={userData.username}
          onFocus={() => handleFieldFocus('username')}
          onChange={(e) => setUserData({ ...userData, username: e.target.value })}
          className={styles.userPhoneInput}
        />

        {errorMessage && <p className={styles.errorMessage}>{errorMessage}</p>}

        <button
          className={styles.submitButton}
          onClick={authenticateWithFingerprint}
          disabled={loading}
        >
          {loading ? 'Authenticating...' : 'Login with Fingerprint'}
        </button>

        <Link to="/signup">
          <p className={styles.link}>Don't Have An Account? Signup now!</p>
        </Link>
      </div>
    </div>
  );
};

export default Login;
